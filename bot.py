import json
import asyncio
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
    ReplyKeyboardRemove
)
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router
from aiogram.client.default import DefaultBotProperties

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7594750001:AAFrfyRfBZURdIXQwKZbL1ShEEeiEyHbsCk"
ADMIN_ID = 6858116356
PHOTO_PATH = "welcome.jpeg"
USERS_FILE = "users.json"
VIDEO_URL = "https://rutube.ru/video/private/c947126ff41010ec1569c1cf15ebccb5/?p=lQ0V4DT8ANAYpue_xNDdVQ"

dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if Path(USERS_FILE).exists():
        with open(USERS_FILE, "r") as f:
            return set(json.load(f))
    return set()

def save_users(users_set):
    with open(USERS_FILE, "w") as f:
        json.dump(list(users_set), f)

users = load_users()
confirmed_contacts = set()
watched_video_users = set()

# üì≤ –ö–Ω–æ–ø–∫–∏
def get_contact_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", request_contact=True)]],
        resize_keyboard=True
    )

def get_restart_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")]],
        resize_keyboard=True
    )

def get_watch_video_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ", url=VIDEO_URL)],
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ–ª –≤–∏–¥–µ–æ ‚úÖ", callback_data="watched_video")]
    ])

def get_message_me_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ", url="https://t.me/ArSdesigns")]
    ])

# üìù –°–æ–æ–±—â–µ–Ω–∏—è
WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ —Å–≤–æ–µ–º –±–æ—Ç–µ üëã\n\n"
    "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫, –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Ç—ã —á–µ–ª–æ–≤–µ–∫.\n\n"
    "–ù–∏–∫–∞–∫–æ–≥–æ —Å–ø–∞–º–∞, —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ë—É–¥—å –≥–æ—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –Ω–µ —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ.\n\n"
    "–ù–∞–∂–∏–º–∞–π ¬´üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.\n\n"
    "–ï—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É –≤ –ø—Ä–∞–≤–æ–º —É–≥–ª—É)"
)

VIDEO_TEXT = (
    "–û—á–µ–Ω—å —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å –∏ –±–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. "
    "–í —ç—Ç–æ–º –≤–∏–¥–µ–æ—É—Ä–æ–∫–µ —è –ø–æ–¥—Ä–æ–±–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—é, –∫–∞–∫ –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏ –Ω–∞ –¥–æ—Ö–æ–¥ –æ—Ç 100.000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü –Ω–∞ –¥–∏–∑–∞–π–Ω–µ –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∏.\n\n"
    "–≠—Ç–æ—Ç —É—Ä–æ–∫ ‚Äî —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à–µ–ª —è –∏ –º–æ–∏ —É—á–µ–Ω–∏–∫–∏. "
    "–≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –∫–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –ø—Ä–∏–≤–µ–¥—ë—Ç —Ç–µ–±—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.\n\n"
    "–ü—Ä–æ—à—É —Ç–æ–ª—å–∫–æ –æ–± –æ–¥–Ω–æ–º ‚Äî –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –ø—Ä–æ—Å–º–æ—Ç—Ä. ¬´–ü–æ—Ç–æ–º¬ª –ª–µ–≥–∫–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ ¬´–Ω–∏–∫–æ–≥–¥–∞¬ª. "
    "–õ—É—á—à–µ –Ω–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî —É—Ä–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–±–µ –≤ –±–æ—Ç–µ –Ω–∏–∂–µ.\n\n"
    "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!"
)

# üö® –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def reminder_task(bot: Bot, user_id: int):
    await asyncio.sleep(3 * 60 * 60)
    if user_id not in watched_video_users:
        await bot.send_message(user_id, "–ë—Ä–æ, —Ç—ã —Ç—É—Ç?", reply_markup=get_restart_keyboard())
    await asyncio.sleep(9 * 60 * 60)
    if user_id not in watched_video_users:
        await bot.send_message(user_id, "–ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å!", reply_markup=get_restart_keyboard())
    await asyncio.sleep(12 * 60 * 60)
    if user_id not in watched_video_users:
        await bot.send_message(user_id, "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ–º–µ–¥–ª–µ–Ω–∏—è ‚Äî –º–∏–Ω—É—Å –¥–µ–Ω—å–≥–∏ –∏ –æ–ø—ã—Ç", reply_markup=get_restart_keyboard())

# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç / –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
@router.message(F.text == "/start")
@router.message(F.text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
async def start_handler(message: Message):
    users.add(message.from_user.id)
    save_users(users)
    photo = FSInputFile(PHOTO_PATH)
    await message.answer_photo(
        photo=photo,
        caption=WELCOME_TEXT,
        reply_markup=get_contact_keyboard()
    )
    asyncio.create_task(reminder_task(message.bot, message.from_user.id))

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@router.message(F.contact)
async def contact_handler(message: Message, bot: Bot):
    contact = message.contact
    confirmed_contacts.add(message.from_user.id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    text = (
        f"üìû –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç\n"
        f"ID: {message.from_user.id}\n"
        f"User: @{message.from_user.username or '–±–µ–∑ username'}\n"
        f"–ò–º—è: {contact.first_name} {contact.last_name or ''}\n"
        f"–ù–æ–º–µ—Ä: {contact.phone_number}"
    )
    await bot.send_message(chat_id=ADMIN_ID, text=text)

    # –£–±–∏—Ä–∞–µ–º ReplyKeyboard
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω ‚úÖ", reply_markup=get_restart_keyboard())

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(VIDEO_TEXT, reply_markup=get_watch_video_keyboard())

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è ¬´–ü–æ—Å–º–æ—Ç—Ä–µ–ª –≤–∏–¥–µ–æ¬ª
@router.callback_query(F.data == "watched_video")
async def watched_video_handler(call: CallbackQuery):
    watched_video_users.add(call.from_user.id)
    await call.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üî•")
    await call.message.edit_reply_markup(reply_markup=None)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ¬ª
    await call.message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä, –Ω–µ –∑–∞–±—ã–≤–∞–π –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–¥–∞—Ä–∫–æ–º)\n\n–£–∂–µ –∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–±—è!",
        reply_markup=get_message_me_keyboard()
    )

# üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
@router.message(F.from_user.id == ADMIN_ID, F.text)
async def admin_handler(message: Message, bot: Bot):
    if message.text.startswith("/send "):
        try:
            parts = message.text.split(maxsplit=2)
            user_id = int(parts[1])
            text = parts[2]
            await bot.send_message(chat_id=user_id, text=text)
            await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        for user_id in users:
            if user_id == ADMIN_ID:
                continue
            try:
                await bot.send_message(chat_id=user_id, text=message.text)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
async def main():
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
